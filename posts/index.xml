<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hugo Winston</title><link>https://example.com/posts/</link><description>Recent content in Posts on Hugo Winston</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Jan 2021 22:49:00 +0000</lastBuildDate><atom:link href="https://example.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>从例子聊聊vim的替换指令</title><link>https://example.com/posts/vim-substitude/</link><pubDate>Tue, 26 Jan 2021 22:49:00 +0000</pubDate><guid>https://example.com/posts/vim-substitude/</guid><description>这两日实习期间，要做三个X功能下的子功能，在X功能下已经有F1~Fn，n个子功能，其中间相似度很高，所以新添加三个子功能的工作基本是复制粘贴，但是每个功能有其若干关键词不同。实现这三个功能由我和一位带我的同事共同完成，但是由于vim的替换功能之给力，让我倒是提前完成了我的部分，跟leader说后，他又分配了我一部分，我还是提前半小时左右完成工作摸鱼等下班了。
例如原来已有功能的是XXX，我们要添加的新功能关键词是YYY，那么我们要把其中一个函数从：UpdateXXXFoo改名为UpdateYYYFoo。
涉及的改动大概有如下这两种：
涉及整个文件内的改动，例如从XXXFence.go复制出来一个YYYFence.go，这里面的函数、注释、字符串（例如写入日志的）都还是以XXX命名的 涉及在原有文件上增加一部分，例如给新功能注册路由。 那么涉及这两种的替换时，vim的替换如何发挥作用呢？
首先我们来看vim的替换的基本用法：
:s/foo/bar/g 这个命令把这一行遇到的所有foo替换为bar，如果没有，就什么都不做
:s （冒号是命令的一部分）表示替换命令，是substitute的缩写，然后用斜杠提示替换前的单词foo，再一个斜杠提示替换后的单词bar，再一个斜杠表示替换标志g
这个g表示替换这一行的所有foo，如果你指向替换第一个，可以用:s/foo/bar，不过就vim的效率思路，你应该直接用c指令去替换（扯远了）
能不能给力点啊？ 来到前面这个问题，如果全局里的XXX要替换为YYY怎么办呢？答案是：
:%s/foo/bar/g 比上一个命令多的一个百分号，表示在整个文件进行替换
按照第一种改动，整个文件里的XXX都要改为YYY，可以直接这么操作。
%是怎么起作用的呢？其实他等价于1,$，也就是从第一行到最后一行生效这个命令（$是最后一行的一个符号），换句话说，上一个命令可以写作
:1,$s/foo/bar/g 其实每个人一看到这种命令就有种自然的恐惧感，啊这又是什么，怎么就$都出来了，如果知道下面这个问题，其实1,$也没有那么可怕
:2,5&amp;lt;命令&amp;gt; 表示的就是这个命令从第二行到第五行生效，这种x,y表示从第x行到第y行执行接下来的命令是vim命令的一个常用操作
顺便：.表示的是当前行
能不能再给力一点啊？ 其实在上面这些，大多数现代IDE都有好用的替换功能，例如IDEA的快捷键是Ctrl+R，全局替换对话框是Ctrl+Shift+R，但是至今我都没有找到，如何选中一个区域进行替换，而这时vim依然有这种操作。
区域替换，先来个例子，原来一个文件里就是用来定义枚举量的，文件内容像这样：
... RequestXXXOperationA:=1 RequestXXXOperationB:=2 RequestXXXOperationC:=3 ... 你添加了一个新功能，也要添加对应的枚举量，于是你先复制了一份XXX关键字的枚举量：
... RequestXXXOperationA:=1 RequestXXXOperationB:=2 RequestXXXOperationC:=3 RequestXXXOperationA:=1 RequestXXXOperationB:=2 RequestXXXOperationC:=3 ... 现在你不能用全局替换（显然的），如果用IDE替换，免不了先放对光标位置，再输入两个字符串，再点击三下replace这一顿操作
更有效率的方式是什么呢？先用
Vjj （行可视模式选择，光标在第二个RequestXXXOperationA这一行）当然怎么选中是无所谓的，如果你刚粘贴完，光标在RequestXXXOperationC这一行，Vkk选中他们
这时再按:,你会发现命令里不只出现了冒号，他们是这样的：
:&amp;#39;&amp;lt;,&amp;#39;&amp;gt; 这是由vim自动补全的，这里的'&amp;lt;和'&amp;gt;共同表示选中的区域（你也能猜到这表示了选中的区域的左右边界），他们和你刚刚看到的2,5表示的没有什么区别，都是限制了接下来命令的范围
你再接着敲完这个命令：
:&amp;#39;&amp;lt;,&amp;#39;&amp;gt;s/foo/bar/g 这样你就能选中刚才刚复制的部分进行替换了，不会影响到文件的其他部分。
能不能再给力一点啊？ 其实再说就不是替换命令的部分了，vim的命令存在缓冲区（或者历史记录）
如果你输入冒号，再按上下键，就能找到你曾经输入过的命令
这么一来，如果你要复制三个文件并进行替换，并且其中混杂着蛇形命名法和驼峰命名法的关键字，如XxxYyy要替换为AaaBbb，而在另一个部分则是xxx_yyy替换为aaa_bbb，那么重复输入不同的替换词，一遍遍的点击replace将是接下来至少半小时的噩梦。
如果你在命令历史记录找到了合适的命令，不妨直接改一改用于这一次替换，或者你刻意把这个命令写成可以复用的模式就不用改了。
好好利用历史记录将极大加快你的替换进度。</description></item><item><title>关于2019</title><link>https://example.com/posts/first/</link><pubDate>Tue, 09 Jun 2020 22:22:10 +0000</pubDate><guid>https://example.com/posts/first/</guid><description>站在2020年中，看2019年，确实是平凡的一年。想比今年所见证的历史，去年所经历的一切似乎都不可避免的蒙上一层平淡的滤镜。
2019之始大概是大一的寒假。我应该是在疑惑，学长大一都做了些什么，为什么看起来这么厉害。在后来的一年里我才逐渐了解到，诸多我当时遇到的学长原来是其中的佼佼者。 但仅就当时而言，想要像那些学长一样，我选择了一个方向：微信小程序。
大概一个“小”字，让初学者比较放心。
比较顺利的是，我找到了一个小组能让我边做边学。虽然以现在的视角来看，我们用非常稚嫩的方式刻画用户需求，边学习工具边练习使用，并且进度管理约等于没有。但是那确实是我不可多得的一次，完全以一个两眼一抹黑的状态，闯入软件工程大坑的经历。倘若真的有什么学到的东西，我觉得是隐约感受到这个专业的“什么都自学”的氛围（这也在后来无数课里被我验证了）
最有意思的是通过该项目负责人——一个颇为泼辣的妹子——我认识了陶姐，用一种我这种内向的人无法理解的方式（闯入人家的火锅局谈笑风生）。后来我受陶之邀参与了大创，另一个令人比较蛋疼的故事。
在国庆之前的那个夏天,那个想起来我就头秃的小学期。我们三人做了一个RPG横版过关游戏的demo。论肝之程度确实比之后来三人开房写代码至3点还差了些，但这就是所谓“第一次”。
那份代码，后来三人统计3k行的C++代码，现在我确实不敢看了。奇迹的是三人在QQ代码管理和手动代码Merge的情况下，仍按时完成了2周的大作业。 因为10月的大事情，8月我就回到学校了。在9月后的没有周末的日子里，我无数次的期盼赶紧国庆，不只是因为这是一个盛会，更因为半夜12点去拉到王府井席地睡一会，排练完5点回来，实在是顶不住。
那会儿我确实充实又快乐，初来乍到本部，有很多之前只能见几次的小伙伴，结果是我在学院路乐不思蜀。 写着写着就变成流水账，确实非我本意。以此一篇练习，作为博客开篇吧。 另：写成流水账正好呼应开头2019无大事好像也没问题</description></item></channel></rss>